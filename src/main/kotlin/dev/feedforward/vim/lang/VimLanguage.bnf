{
  parserClass="dev.feedforward.vim.lang.parser.VimParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Vim"
  psiImplClassSuffix="Impl"
  psiPackage="dev.feedforward.vim.lang.psi"
  psiImplPackage="dev.feedforward.vim.lang.psi.impl"

  elementTypeHolderClass="dev.feedforward.vim.lang.psi.VimTypes"
  elementTypeClass="dev.feedforward.vim.lang.psi.VimElementType"
  tokenTypeClass="dev.feedforward.vim.lang.psi.VimTokenType"

  tokens = [
      ASSIGNMENT         = '='
      DOT_ASSIGNMENT     = '.='
      PLUS_ASSIGNMENT    = '+='
      MINUS_ASSIGNMENT   = '-='

      ANDAND             = '&&'
      OROR               = '||'
      EQEQ               = '=='
      EQEQCI             = '==?'
      EQEQCS             = '==#'
      NEQ                = '!='
      NEQCI              = '!=?'
      NEQCS              = '!=#'
      GT                 = '>'
      GTCI               = '>?'
      GTCS               = '>#'
      GTEQ               = '>='
      GTEQCI             = '>=?'
      GTEQCS             = '>=#'
      LT                 = '<'
      LTCI               = '<?'
      LTCS               = '<#'
      LTEQ               = '<='
      LTEQCI             = '<=?'
      LTEQCS             = '<=#'
      MATCH              = '=~'
      MATCHCI            = '=~?'
      MATCHCS            = '=~#'
      NOMATCH            = '!~'
      NOMATCHCI          = '!~?'
      NOMATCHCS          = '!~#'
      IS                 = 'is'
      ISCI               = 'is?'
      ISCS               = 'is#'
      ISNOT              = 'isnot'
      ISNOTCI            = 'isnot?'
      ISNOTCS            = 'isnot#'
      PLUS               = '+'
      MINUS              = '-'
      DOT                = '.'
      STAR               = '*'
      SLASH              = '/'
      PERCENT            = '%'
      BANG               = '!'
      DOLLAR             = '$'
      SINGLE_QUOTE       = "'"
      COMMA              = ","
      SEMICOLON          = ";"

      SQOPEN             = '['
      SQCLOSE            = ']'
      COLON              = ':'
      POPEN              = '('
      PCLOSE             = ')'
      QUESTION           = '?'

      ESCAPED_AMPERSAND  = 'regexp:\\&'
      ESCAPED_QUESTION  = 'regexp:\\\?'
      ESCAPED_SLASH  = 'regexp:\\/'

      C_ECHO = "regexp:echo|ech|ec"

      QUOTE_WITH_ANYTHING = "regexp:'."

      OPEN_QUOTE = '"'
      CLOSE_QUOTE = '"'
      STRING_LITERAL = 'regexp:("([^"\\]|\\.)*")'

      HEX_NUMBER = 'regexp:0[xX][0-9a-fA-F]+'
      INT_NUMBER = 'regexp:\d+'
      FLOAT_NUMBER = 'regexp:\d+\.\d+'
      SCIENTIFIC_NUMBER = 'regexp:\d+\.\d+([eE])(([+-])?\d+)'

      WORD = 'regexp:\p{L}+'

      space='regexp:\s+'
  ]

  extends(".*expr")=expr
  extends(".*command")=command
}

vimFile ::= item_*

private item_ ::= (commands|FULL_LINE_COMMENT|CRLF)

private commands ::= command (BAR command)* [COMMENT]

command ::= echo_command
          | let_command
          | if_command
          | while_command
          | common_command

echo_command ::= C_ECHO expr*
common_command ::= [command_range] COMMON_COMMAND_NAME [COMMON_COMMAND_ARGUMENT]

command_range ::= starred_range (range_separator starred_range)*

let_command ::= let_with_expression | let_with_name | single_let
private single_let ::= LET
private let_with_name ::= LET WORD
private let_with_expression ::= LET lvalue ('=' | '+=' | '-=' | '.=') expr

if_command ::= IF expr
                if_while_body
               elseif_clause*
               else_clause?
               ENDIF
while_command ::= WHILE expr if_while_body ENDWHILE

private elseif_clause ::= ELSEIF expr if_while_body
private else_clause ::= ELSE if_while_body
private if_while_body ::= item_*

private starred_range ::= range_address_with_offset [percent_star]
range_address_with_offset ::= range_address plus_minus_number*
range_address ::= ('.'|'$'|QUOTE_WITH_ANYTHING|ESCAPED_AMPERSAND|ESCAPED_QUESTION|ESCAPED_SLASH|INT_NUMBER)
private plus_minus_number ::= ['+'|'-'] INT_NUMBER
private percent_star ::= '%'|'*'
private range_separator ::= ','|';'

expr ::= ternary_expr
       | logical_or_expr
       | logical_and_expr
       | comparison_expr
       | add_expr
       | mul_expr
       | unary_expr
       | squares_group_expr
       | final_expr

private squares_group_expr ::= squares_expr | call_expr
private final_expr ::= literal_expr | parentheses_expr

ternary_expr ::= expr '?' expr ':' expr
logical_or_expr ::= expr '||' expr
logical_and_expr ::= expr '&&' expr
comparison_expr ::= expr ('=='    | '==?'    | '==#'
                        | '!='    | '!=?'    | '!=#'
                        | '>'     | '>?'     | '>#'
                        | '>='    | '>=?'    | '>=#'
                        | '<'     | '<?'     | '<#'
                        | '<='    | '<=?'    | '<=#'
                        | '=~'    | '=~?'    | '=~#'
                        | '!~'    | '!~?'    | '!~#'
                        | 'is'    | 'is?'    | 'is#'
                        | 'isnot' | 'isnot?' | 'isnot#') expr
add_expr ::= expr ('+' | '-' | '.') expr
mul_expr ::= expr ('*' | '/' | '%') expr
unary_expr ::= ('!' | '+' | '-') expr
literal_expr ::= number | STRING_LITERAL
parentheses_expr ::= '(' expr ')'

squares_expr ::= expr (bracket_slice|subscript)
bracket_slice ::= SQOPEN expr? ':' expr? SQCLOSE
subscript ::= SQOPEN expr SQCLOSE
call_expr ::= expr arg_list
// Vim allows foo(a, b, ).
arg_list ::= '(' expr (',' (expr | &')'))* ')' {pin(".*")=1}

number ::= HEX_NUMBER | INT_NUMBER | FLOAT_NUMBER | SCIENTIFIC_NUMBER

lvalue ::= WORD
