{
  parserClass="dev.feedforward.parser.VimParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Vim"
  psiImplClassSuffix="Impl"
  psiPackage="dev.feedforward.psi"
  psiImplPackage="dev.feedforward.psi.impl"

  elementTypeHolderClass="dev.feedforward.psi.VimTypes"
  elementTypeClass="dev.feedforward.psi.VimElementType"
  tokenTypeClass="dev.feedforward.psi.VimTokenType"

  tokens = [
      ANDAND             = '&&'
      OROR               = '||'
      EQEQ               = '=='
      EQEQCI             = '==?'
      EQEQCS             = '==#'
      NEQ                = '!='
      NEQCI              = '!=?'
      NEQCS              = '!=#'
      GT                 = '>'
      GTCI               = '>?'
      GTCS               = '>#'
      GTEQ               = '>='
      GTEQCI             = '>=?'
      GTEQCS             = '>=#'
      LT                 = '<'
      LTCI               = '<?'
      LTCS               = '<#'
      LTEQ               = '<='
      LTEQCI             = '<=?'
      LTEQCS             = '<=#'
      MATCH              = '=~'
      MATCHCI            = '=~?'
      MATCHCS            = '=~#'
      NOMATCH            = '!~'
      NOMATCHCI          = '!~?'
      NOMATCHCS          = '!~#'
      IS                 = 'is'
      ISCI               = 'is?'
      ISCS               = 'is#'
      ISNOT              = 'isnot'
      ISNOTCI            = 'isnot?'
      ISNOTCS            = 'isnot#'
      PLUS               = '+'
      MINUS              = '-'
      DOT                = '.'
      STAR               = '*'
      SLASH              = '/'
      PERCENT            = '%'
      NOT                = '!'

      ECHO = "echo"
      OPEN_QUOTE = '"'
      CLOSE_QUOTE = '"'
      STRING_LITERAL = 'regexp:("([^"\\]|\\.)*")'

      space='regexp:\s+'
  ]

  extends(".*expr")=expr
}

vimFile ::= item_*

private item_ ::= (echo_command|COMMENT|CRLF)

echo_command ::= ECHO expr*


expr ::= logical_or_expr
       | logical_and_expr
       | comparison_expr
       | add_expr
       | mul_expr
       | unary_expr
       | literal_expr



logical_or_expr ::= expr '||' expr
logical_and_expr ::= expr '&&' expr
comparison_expr ::= expr ('==' | '==?' | '==#' | '!=' | '!=?' | '!=#' | '>' | '>?' | '>#' | '>=' | '>=?' | '>=#' | '<' | '<?' | '<#' | '<=' | '<=?' | '<=#' | '=~' | '=~?' | '=~#' | '!~' | '!~?' | '!~#' | 'is' | 'is?' | 'is#' | 'isnot' | 'isnot?' | 'isnot#') expr
add_expr ::= expr ('+' | '-' | '.') expr
mul_expr ::= expr ('*' | '/' | '%') expr
unary_expr ::= ('!' | '+' | '-') expr
literal_expr ::= STRING_LITERAL
